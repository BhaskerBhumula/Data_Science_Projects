/*1.Retrieve the names of all products in the 
products table.*/

select product_name from products;

/* 2.Write a query to find the full name 
of customers (first_name + last_name) and the
names of the products they ordered. */

select 
customers.customer_id,
concat(customers.f_name,' ',customers.l_name) as full_name,
products.product_name
from customers
join orders
on orders.customer_id = customers.customer_id
join order_items
on order_items.order_id = orders.order_id
join products
on products.product_id = order_items.product_id;

/*3.List all products with a price greater
 than 100. Display the product name and price.*/
 
 select product_name, price from products
 where price > 100;
 
 /*4.List all orders along with customer 
 names and product names.*/

select 
orders.order_id,
concat(customers.f_name,' ',customers.l_name) as full_name,
products.product_name
from orders
join customers
on orders.customer_id = customers.customer_id
join order_items
on order_items.order_id = orders.order_id
join products
on products.product_id = order_items.product_id;

/*5. Retrieve all customers and their 
corresponding orders. Include customers who haven't
placed any orders.*/

select 
customers.customer_id,
CONCAT(customers.f_name, ' ', customers.l_name) AS customer_name,
orders.order_id,
orders.order_date 
from customers
left join orders 
on customers.customer_id = orders.customer_id;

/*6.Retrieve all orders and their 
corresponding customers. Include orders without
customer information.*/

SELECT 
    o.order_id,
    o.order_date,
    o.customer_id,
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM 
    orders o
RIGHT JOIN 
    customers c ON o.customer_id = c.customer_id;

/*7.List all products sold by 
sellers originating from 'USA.' Include product names
and seller names.*/

select 
products.product_id,
products.product_name,
sellers.seller_name,
sellers.origin
from orders
join sellers
on orders.seller_id = sellers.seller_id
join order_items
on order_items.order_id = orders.order_id
join products
on products.product_id = order_items.product_id
where sellers.origin = 'USA';

/*8.Write a query to find the total 
amount paid for each order. Include the orders,
order_items, and payments tables.*/

select * 
from orders
join order_items
on orders.order_id = order_items.order_id
join payments
on payments.order_id = orders.order_id;

/*9.List the customers who have 
ordered products in the 'electronics' category.*/

select 
concat(customers.f_name,' ',customers.l_name) as full_name
from customers
join orders 
on orders.customer_id = customers.customer_id
join order_items
on orders.order_id = order_items.order_id
join products
on products.product_id = order_items.product_id
where 
products.category_id = (select category_id from category  where  category_name = 'electronics');

/*10.Write a query to list all combinations 
of category and sellers.*/

SELECT 
    category.category_name,
    sellers.seller_name
FROM 
    category 
CROSS JOIN 
    sellers ;

/*11.Count the total number of unique 
customers in the customers table.*/

select count(distinct(concat(customers.f_name,' ',customers.l_name))) as unique_customers from customers;

/*12.Find the total revenue generated 
by each seller. Display the seller name and total revenue.*/

select 
sellers.seller_id,
sellers.seller_name,
SUM(order_items.total_sale) as total_revenue
from sellers 
join orders on orders.seller_id = sellers.seller_id
join order_items on orders.order_id = order_items.order_id
group by 1,2;

/*13.Calculate the average price of 
products in the products table.*/

SELECT 
    AVG(price) AS average_price
FROM 
    products;

/*14.List all sellers who have 
sold more than 500 products. Display seller names and 
total products sold.*/

select 
sellers.seller_id,
sellers.seller_name,
sum(order_items.quantity) as products_sold
from orders
join sellers
on orders.seller_id = sellers.seller_id
join order_items
on order_items.order_id = orders.order_id
join products
on products.product_id = order_items.product_id
group by 1,2
having sum(order_items.quantity) > 500;

/*15.Find the total revenue 
generated by each seller for each category.Display seller names,
category names, and total revenue.*/

select 
sellers.seller_id,
sellers.seller_name,
category.category_name,
SUM(order_items.total_sale) as total_revenue
from orders
join sellers
on orders.seller_id = sellers.seller_id
join order_items
on order_items.order_id = orders.order_id
join products
on products.product_id = order_items.product_id
join category
on category.category_id = products.category_id
group by 1,2,3;

/*16.Find the total number of distinct 
products sold in each category.*/

select 
category.category_id,
category.category_name,
sum(distinct(products.product_id)) as products_sold
from category
join products
on category.category_id = products.category_id
group by 1,2;

/*17.Write a query to find the total 
number of orders and the total revenue generated for each
customer.*/

select 
customers.customer_id,
concat(customers.f_name,' ',customers.l_name) as full_name,
count((orders.order_id)) as orders_placed,
sum(order_items.total_sale) as revenue_generated
from customers
join orders
on customers.customer_id = orders.customer_id
join order_items
on orders.order_id = order_items.order_id
group by 1,2;

/*18.Find the number of orders 
for each order status ('Inprogress,''Delivered,' etc.). */

select
SUM(CASE WHEN orders.order_status = 'Completed' THEN 1 ELSE 0 END) AS Completed_orders,
SUM(CASE WHEN orders.order_status = 'Cancelled' THEN 1 ELSE 0 END) AS Cancelled_orders,
SUM(CASE WHEN orders.order_status = 'Inprogress' THEN 1 ELSE 0 END) AS Inprogress_orders,    
SUM(CASE WHEN orders.order_status = 'Returned' THEN 1 ELSE 0 END) AS Returned_orders
from orders;

/*19.Find the category with the highest total revenue.*/

select
category.category_id,
category.category_name,
sum(order_items.total_sale)  as total_revenue
from category
join products
on category.category_id = products.category_id
join order_items
on products.product_id = order_items.product_id
group by 1,2
order by total_revenue
limit 5;

/*20.Count the number of successful and failed payments for 
each customer.*/

select 
customers.customer_id,
concat(customers.f_name,' ',customers.l_name) as full_name,
sum(CASE WHEN payments.payment_status = 'Payment Successed' THEN 1 ELSE 0 END) AS payment_successful,
sum(CASE WHEN payments.payment_status = 'Payment Failed' THEN 1 ELSE 0 END) AS payment_failed
from customers
join orders
on orders.customer_id = customers.customer_id
join payments
on payments.order_id = orders.order_id
group by 1,2;

/*21.Find the product with the highest price.*/

select product_name,price
from products
where price = (select max(price) from products);

/*22.Find all products whose price is above the average price 
in their category.*/

SELECT p.product_name, c.category_name, p.price
FROM products p 
JOIN category c ON p.category_id = c.category_id
WHERE p.price > (
    SELECT AVG(p1.price) FROM products p1 WHERE  
    p1.category_id = p.category_id     
) ;


/*23.Retrieve the names of customers who have ordered at least 
one product in the 'Pet Supplies' category.*/

SELECT 
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM 
    customers c
WHERE 
    c.customer_id IN (
        SELECT DISTINCT o.customer_id
        FROM orders o
        JOIN order_items oi ON o.order_id = oi.order_id
        JOIN products p ON oi.product_id = p.product_id
        JOIN category cat ON p.category_id = cat.category_id
        WHERE cat.category_name = 'Pet Supplies'
    );
    
    
/*24.For each product, display its name and the total number 
of times it has been ordered.*/

 select 
 products.product_name,
 count(order_items.order_item_id) as time_ordered
 from products
 join order_items
 on products.product_id = order_items.product_id
 group by 1;


/*25.List all customers who have made at least one order */

select * 
from customers
join orders
on orders.customer_id = customers.customer_id;

/*26.Find the names of sellers who have sold 'Apple' products*/

select 
sellers.seller_name,
products.product_name
from sellers
join orders
on sellers.seller_id = orders.seller_id
join order_items
on orders.order_id = order_items.order_id
join products
on products.product_id = order_items.product_id
where product_name like '%Apple%';

/*27.List all customers who have not placed any orders*/
 
SELECT * FROM customers
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders);

/*28.Find the names of products that are out of stock.*/

select * 
from products
join inventory
on inventory.product_id = products.product_id
where inventory.stock = 0;

/*29. Retrieve sellers who have an average selling price of 
their products greater than 300.*/

select 
sellers.seller_id,
sellers.seller_name,
avg(products.price) as selling_price
from sellers 
join orders
on orders.seller_id = sellers.seller_id
join order_items
on order_items.order_id = orders.order_id
join products
on products.product_id = order_items.product_id
group by 1,2
having 
avg(products.price) > 300;

/*30.Find the product that has generated the highest revenue.*/

select 
products.product_id,
products.product_name,
sum(order_items.total_sale) as total_revenue
from products
join order_items
on products.product_id = order_items.product_id
group by 1,2
order by total_revenue desc
limit 10;

/*31.For each category, rank the products based on their total 
sales amount.*/

select 
category.category_id,
category.category_name,
products.product_id,
products.product_name,
sum(order_items.quantity * order_items.price_per_unit) as total_sales_amount,
rank () over(PARTITION BY category.category_id ORDER BY sum(order_items.quantity * order_items.price_per_unit) DESC) AS sales_rank
from order_items
join products
on order_items.product_id = products.product_id
join category
on category.category_id = products.category_id
group by 1,2,3,4
order by category.category_name, sales_rank;

/*32.List the top 5 customers based on the total amount spent.*/

select 
customers.customer_id,
customers.f_name,
customers.l_name,
sum(order_items.total_sale) as amount_spent,
dense_rank() over(order by sum(order_items.total_sale) desc) as ranking
from customers
join orders 
on customers.customer_id = orders.customer_id
join order_items
on order_items.order_id = orders.order_id
group by 1,2,3
limit 5;

/*33.Assign a row number to each product in the products table,
ordered by price descending.*/

select 
product_id,
product_name,
price,
row_number() over(order by price desc) as row_numbers
from products;

/*34.Divide all customers into 4 quartiles based on the total 
amount they have spent.*/

select 
customers.customer_id,
customers.f_name,
customers.l_name,
sum(order_items.total_sale) as amount_spent,
NTILE(4) OVER (ORDER BY sum(order_items.total_sale) DESC) AS quartile
from customers
join orders 
on customers.customer_id = orders.customer_id
join order_items
on order_items.order_id = orders.order_id
group by 1,2,3
order by quartile, amount_spent desc;

/*35.For each order, calculate the running total of sales for 
the corresponding customer.*/

SELECT 
    o.customer_id,
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name,
    o.order_id,
    SUM(oi.total_sale) AS order_total,
    SUM(SUM(oi.total_sale)) OVER (
        PARTITION BY o.customer_id 
        ORDER BY o.order_id
    ) AS running_total
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    o.customer_id, c.f_name, c.l_name, o.order_id
ORDER BY 
    o.customer_id, o.order_id;

/*36.Find the total revenue generated by each seller in each 
year.*/

SELECT 
    sellers.seller_id,
    sellers.seller_name,
    YEAR(orders.order_date) AS year,
    SUM(order_items.quantity * order_items.price_per_unit) AS total_revenue
FROM 
    sellers 
JOIN 
    orders  ON sellers.seller_id = orders.seller_id
JOIN 
    order_items ON orders.order_id = order_items.order_id
JOIN 
    products  ON order_items.product_id = products.product_id
GROUP BY 
    sellers.seller_id, sellers.seller_name, YEAR(orders.order_date)
ORDER BY 
    sellers.seller_id, year;

/*37.For each product, find the next higher-priced product in the 
same category.*/

SELECT 
    p.category_id,
    cat.category_name,
    p.product_name,
    p.price AS current_price,
    LEAD(p.product_name) OVER (
        PARTITION BY p.category_id 
        ORDER BY p.price
    ) AS next_higher_product,
    LEAD(p.price) OVER (
        PARTITION BY p.category_id 
        ORDER BY p.price
    ) AS next_higher_price
FROM 
    products p
JOIN 
    category cat ON p.category_id = cat.category_id
ORDER BY 
    p.category_id, p.price;

/*38.For each product, find the previous lower-priced product 
in the same category.*/

SELECT 
    p.category_id,
    cat.category_name,
    p.product_name,
    p.price AS current_price,
    LAG(p.product_name) OVER (
        PARTITION BY p.category_id 
        ORDER BY p.price
    ) AS previous_lower_product,
    LAG(p.price) OVER (
        PARTITION BY p.category_id 
        ORDER BY p.price
    ) AS previous_lower_price
FROM 
    products p
JOIN 
    category cat ON p.category_id = cat.category_id
ORDER BY 
    p.category_id, p.price;

/*39.Calculate the cumulative sum of sales for each seller.*/

SELECT 
    sellers.seller_id,
    sellers.seller_name,
    orders.order_id,
    SUM(order_items.quantity * order_items.price_per_unit) AS order_total,
    SUM(SUM(order_items.quantity * order_items.price_per_unit)) OVER (
        PARTITION BY sellers.seller_id
        ORDER BY orders.order_date
    ) AS cumulative_sales
FROM 
    sellers 
JOIN 
    orders  ON sellers.seller_id = orders.seller_id
JOIN 
    order_items ON orders.order_id = order_items.order_id
JOIN 
    products  ON order_items.product_id = products.product_id
GROUP BY 
    sellers.seller_id, sellers.seller_name, orders.order_id, orders.order_date
ORDER BY 
    sellers.seller_id, orders.order_date;

/*40.Find the average order amount for each customer and
compare it with their individual orders.*/

SELECT 
    c.customer_id,
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name,
    o.order_id,
    SUM(oi.quantity * oi.price_per_unit) AS order_amount,
    AVG(SUM(oi.quantity * oi.price_per_unit)) OVER (PARTITION BY c.customer_id) AS average_order_amount
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    c.customer_id, c.f_name, c.l_name, o.order_id
ORDER BY 
    c.customer_id, o.order_id;

/*41.List all orders placed in the current month. Include order 
ID, order date, andcustomer name.*/

SELECT 
    o.order_id,
    o.order_date,
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM 
    orders o
JOIN 
    customers c ON o.customer_id = c.customer_id
WHERE 
    YEAR(o.order_date) = YEAR(CURRENT_DATE) 
    AND MONTH(o.order_date) = MONTH(CURRENT_DATE)
ORDER BY 
    o.order_date;

/*42.Find the number of orders placed in each year. Use the 
EXTRACT() function to group by year.*/

SELECT 
    EXTRACT(YEAR FROM o.order_date) AS order_year,
    COUNT(o.order_id) AS number_of_orders
FROM 
    orders o
GROUP BY 
    EXTRACT(YEAR FROM o.order_date)
ORDER BY 
    order_year;

/*43.Calculate the average delivery time for all delivered 
orders.*/

SELECT 
    COALESCE(AVG(shippings.return_date - shippings.shipping_date),
            0) AS avg_delivery_time
FROM 
    orders o
join shippings
on shippings.order_id = o.order_id
WHERE 
    o.order_status = 'Delivered' 
    AND shippings.return_date IS NOT NULL;

/*44.Find the total sales amount for each month in the current
 year.*/

SELECT 
    EXTRACT(MONTH FROM o.order_date) AS order_month,
    SUM(oi.quantity * oi.price_per_unit) AS total_sales
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
WHERE 
    EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY 
    EXTRACT(MONTH FROM o.order_date)
ORDER BY 
    order_month;

/*45.Find customers who have not placed any orders in the last 
6 months.*/

SELECT 
    c.customer_id,
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM 
    customers c
LEFT JOIN 
    orders o ON c.customer_id = o.customer_id 
    AND o.order_date >= CURRENT_DATE - INTERVAL '6' MONTH
WHERE 
    o.order_id IS NULL
ORDER BY 
    c.customer_id;

/*46.Convert the order_date to a different format 
(e.g., 'YYYY-MM-DD') and display it with the order ID.*/

SELECT 
    o.order_id,
    DATE_FORMAT(o.order_date, '%Y-%m-%d') AS formatted_order_date
FROM 
    orders o
ORDER BY 
    o.order_id;


/*47.Calculate the total number of days between the order date and shipping date
for each order.*/

SELECT 
    o.order_id,
    DATEDIFF(shippings.shipping_date, o.order_date) AS days_between_order_and_shipping
FROM 
    orders o
join shippings
on shippings.order_id = o.order_id    
WHERE 
    shippings.shipping_date IS NOT NULL
ORDER BY 
    o.order_id;

/*48.Find all orders that are overdue for payment. Assume 
payment is due within 30 days of the order date.*/

SELECT 
    o.order_id,
    o.order_date,
    payments.payment_status
FROM 
    orders o
join payments
on o.order_id = payments.order_id
WHERE 
    payments.payment_status != 'Payment Successed' 
    AND DATEDIFF(CURRENT_DATE, o.order_date) > 30
ORDER BY 
    o.order_id;
    
/*49.Retrieve all orders that were placed on weekends.*/

SELECT 
    o.order_id,
    o.order_date
FROM 
    orders o
WHERE 
    DAYOFWEEK(o.order_date) IN (1, 7)  -- 1 = Sunday, 7 = Saturday
ORDER BY 
    o.order_date;

/*50.List all orders that were delivered the next day after 
shipping.*/

SELECT 
    o.order_id,
    shippings.shipping_date
FROM 
    orders o
    join shippings 
    on o.order_id = shippings.order_id
WHERE 
    DATEDIFF(shippings.return_date, shippings.shipping_date) = 1
ORDER BY 
    o.order_id;
